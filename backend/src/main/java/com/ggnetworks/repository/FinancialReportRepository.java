package com.ggnetworks.repository;

import com.ggnetworks.entity.FinancialReport;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface FinancialReportRepository extends JpaRepository<FinancialReport, Long> {

    // Find by report type
    List<FinancialReport> findByReportTypeAndDeletedAtIsNull(FinancialReport.ReportType reportType);
    
    // Find by period start date range
    List<FinancialReport> findByPeriodStartBetweenAndDeletedAtIsNull(LocalDateTime startDate, LocalDateTime endDate);
    
    // Find by period end date range
    List<FinancialReport> findByPeriodEndBetweenAndDeletedAtIsNull(LocalDateTime startDate, LocalDateTime endDate);
    
    // Find generated reports
    List<FinancialReport> findByIsGeneratedTrueAndDeletedAtIsNull();
    
    // Find pending reports
    List<FinancialReport> findByIsGeneratedFalseAndDeletedAtIsNull();
    
    // Find by generated by
    List<FinancialReport> findByGeneratedByAndDeletedAtIsNull(String generatedBy);
    
    // Find by generation date range
    List<FinancialReport> findByGeneratedAtBetweenAndDeletedAtIsNull(LocalDateTime startDate, LocalDateTime endDate);
    
    // Find reports by name pattern
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.reportName LIKE %:pattern% AND fr.deletedAt IS NULL")
    List<FinancialReport> findByReportNamePattern(@Param("pattern") String pattern);
    
    // Find reports with pagination
    Page<FinancialReport> findByDeletedAtIsNull(Pageable pageable);
    
    // Find reports by type with pagination
    Page<FinancialReport> findByReportTypeAndDeletedAtIsNull(FinancialReport.ReportType reportType, Pageable pageable);
    
    // Find generated reports with pagination
    Page<FinancialReport> findByIsGeneratedTrueAndDeletedAtIsNull(Pageable pageable);
    
    // Count by report type
    long countByReportTypeAndDeletedAtIsNull(FinancialReport.ReportType reportType);
    
    // Count generated reports
    long countByIsGeneratedTrueAndDeletedAtIsNull();
    
    // Count pending reports
    long countByIsGeneratedFalseAndDeletedAtIsNull();
    
    // Find reports by date range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.periodStart >= :startDate AND fr.periodEnd <= :endDate")
    List<FinancialReport> findByDateRange(@Param("startDate") LocalDateTime startDate, 
                                         @Param("endDate") LocalDateTime endDate);
    
    // Find reports by profit range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.netProfit BETWEEN :minProfit AND :maxProfit")
    List<FinancialReport> findByProfitRange(@Param("minProfit") BigDecimal minProfit, 
                                           @Param("maxProfit") BigDecimal maxProfit);
    
    // Find reports by revenue range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.totalRevenue BETWEEN :minRevenue AND :maxRevenue")
    List<FinancialReport> findByRevenueRange(@Param("minRevenue") BigDecimal minRevenue, 
                                            @Param("maxRevenue") BigDecimal maxRevenue);
    
    // Find reports by expense range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.totalExpenses BETWEEN :minExpenses AND :maxExpenses")
    List<FinancialReport> findByExpenseRange(@Param("minExpenses") BigDecimal minExpenses, 
                                            @Param("maxExpenses") BigDecimal maxExpenses);
    
    // Find profitable reports
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.netProfit > 0")
    List<FinancialReport> findProfitableReports();
    
    // Find loss-making reports
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.netProfit < 0")
    List<FinancialReport> findLossMakingReports();
    
    // Find reports by profit margin range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.profitMarginPercentage BETWEEN :minMargin AND :maxMargin")
    List<FinancialReport> findByProfitMarginRange(@Param("minMargin") BigDecimal minMargin, 
                                                 @Param("maxMargin") BigDecimal maxMargin);
    
    // Find reports by savings rate range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.savingsRatePercentage BETWEEN :minRate AND :maxRate")
    List<FinancialReport> findBySavingsRateRange(@Param("minRate") BigDecimal minRate, 
                                                @Param("maxRate") BigDecimal maxRate);
    
    // Find reports by investment rate range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.investmentRatePercentage BETWEEN :minRate AND :maxRate")
    List<FinancialReport> findByInvestmentRateRange(@Param("minRate") BigDecimal minRate, 
                                                   @Param("maxRate") BigDecimal maxRate);
    
    // Find reports by cash flow range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.cashFlow BETWEEN :minCashFlow AND :maxCashFlow")
    List<FinancialReport> findByCashFlowRange(@Param("minCashFlow") BigDecimal minCashFlow, 
                                             @Param("maxCashFlow") BigDecimal maxCashFlow);
    
    // Find reports by budget variance range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.budgetVariance BETWEEN :minVariance AND :maxVariance")
    List<FinancialReport> findByBudgetVarianceRange(@Param("minVariance") BigDecimal minVariance, 
                                                    @Param("maxVariance") BigDecimal maxVariance);
    
    // Get financial report statistics
    @Query("SELECT COUNT(fr) as totalReports, " +
           "COUNT(CASE WHEN fr.isGenerated = TRUE THEN 1 END) as generatedReports, " +
           "COUNT(CASE WHEN fr.isGenerated = FALSE THEN 1 END) as pendingReports, " +
           "AVG(fr.totalRevenue) as avgRevenue, " +
           "AVG(fr.totalExpenses) as avgExpenses, " +
           "AVG(fr.netProfit) as avgNetProfit, " +
           "AVG(fr.profitMarginPercentage) as avgProfitMargin, " +
           "AVG(fr.savingsRatePercentage) as avgSavingsRate, " +
           "AVG(fr.investmentRatePercentage) as avgInvestmentRate " +
           "FROM FinancialReport fr WHERE fr.deletedAt IS NULL")
    Object[] getFinancialReportStatistics();
    
    // Get financial report statistics by type
    @Query("SELECT COUNT(fr) as totalReports, " +
           "AVG(fr.totalRevenue) as avgRevenue, " +
           "AVG(fr.totalExpenses) as avgExpenses, " +
           "AVG(fr.netProfit) as avgNetProfit, " +
           "AVG(fr.profitMarginPercentage) as avgProfitMargin " +
           "FROM FinancialReport fr WHERE fr.reportType = :reportType AND fr.deletedAt IS NULL")
    Object[] getFinancialReportStatisticsByType(@Param("reportType") FinancialReport.ReportType reportType);
    
    // Find reports by date range and type
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.periodStart >= :startDate AND fr.periodEnd <= :endDate AND fr.reportType = :reportType")
    List<FinancialReport> findByDateRangeAndType(@Param("startDate") LocalDateTime startDate, 
                                                 @Param("endDate") LocalDateTime endDate, 
                                                 @Param("reportType") FinancialReport.ReportType reportType);
    
    // Find reports by generation date range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.generatedAt BETWEEN :startDate AND :endDate")
    List<FinancialReport> findByGenerationDateRange(@Param("startDate") LocalDateTime startDate, 
                                                   @Param("endDate") LocalDateTime endDate);
    
    // Find reports by generated by and date range
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND " +
           "fr.generatedBy = :generatedBy AND fr.generatedAt BETWEEN :startDate AND :endDate")
    List<FinancialReport> findByGeneratedByAndDateRange(@Param("generatedBy") String generatedBy, 
                                                        @Param("startDate") LocalDateTime startDate, 
                                                        @Param("endDate") LocalDateTime endDate);
    
    // Find high-profit reports
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.netProfit >= :minProfit ORDER BY fr.netProfit DESC")
    List<FinancialReport> findHighProfitReports(@Param("minProfit") BigDecimal minProfit);
    
    // Find reports with high profit margin
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.profitMarginPercentage >= :minMargin ORDER BY fr.profitMarginPercentage DESC")
    List<FinancialReport> findHighProfitMarginReports(@Param("minMargin") BigDecimal minMargin);
    
    // Find reports with high savings rate
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.savingsRatePercentage >= :minRate ORDER BY fr.savingsRatePercentage DESC")
    List<FinancialReport> findHighSavingsRateReports(@Param("minRate") BigDecimal minRate);
    
    // Find reports with high investment rate
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.investmentRatePercentage >= :minRate ORDER BY fr.investmentRatePercentage DESC")
    List<FinancialReport> findHighInvestmentRateReports(@Param("minRate") BigDecimal minRate);
    
    // Find reports with positive cash flow
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.cashFlow > 0 ORDER BY fr.cashFlow DESC")
    List<FinancialReport> findPositiveCashFlowReports();
    
    // Find reports with negative cash flow
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.cashFlow < 0 ORDER BY fr.cashFlow ASC")
    List<FinancialReport> findNegativeCashFlowReports();
    
    // Find reports with budget overruns
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.budgetVariance > 0 ORDER BY fr.budgetVariance DESC")
    List<FinancialReport> findBudgetOverrunReports();
    
    // Find reports with budget underruns
    @Query("SELECT fr FROM FinancialReport fr WHERE fr.deletedAt IS NULL AND fr.budgetVariance < 0 ORDER BY fr.budgetVariance ASC")
    List<FinancialReport> findBudgetUnderrunReports();
} 