# FreeRADIUS SQL Configuration for GGWIFI
# This file configures FreeRADIUS to use MySQL database
# Database: ggwifi
# Username: freeradius
# Password: freeradius_password

sql {
    # Database type
    driver = "rlm_sql_mysql"

    # Connection info
    server = "localhost"
    port = 3306
    login = "freeradius"
    password = "freeradius_password"

    # Database name
    radius_db = "ggwifi"

    # Connection pool settings
    acct_table1 = "radacct"
    acct_table2 = "radacct"
    postauth_table = "radpostauth"
    authcheck_table = "radcheck"
    groupcheck_table = "radgroupcheck"
    authreply_table = "radreply"
    groupreply_table = "radgroupreply"
    usergroup_table = "radusergroup"
    deletestalesessions = yes

    # Connection timeout
    connect_timeout = 3.0

    # SQL queries
    read_groups = yes
    sqllog = yes

    # Accounting settings
    accounting {
        reference = "%{tolower:type.%{Acct-Status-Type}}"
        
        type {
            accounting-on {
                query = "\
                    UPDATE ${..acct_table1} \
                    SET acctstoptime = NOW(), \
                        acctterminatecause = '%{Acct-Terminate-Cause}', \
                        acctstopdelay = 0 \
                    WHERE acctuniqueid = '%{Acct-Unique-Session-Id}' \
                    AND acctstoptime IS NULL"

                pool {
                    start = 5
                    min = 4
                    max = 10
                    spare = 3
                    uses = 0
                    retry_delay = 30
                    lifetime = 0
                    idle_timeout = 60
                }
            }

            accounting-off {
                query = "\
                    UPDATE ${..acct_table1} \
                    SET acctstoptime = NOW(), \
                        acctterminatecause = '%{Acct-Terminate-Cause}', \
                        acctstopdelay = 0 \
                    WHERE acctuniqueid = '%{Acct-Unique-Session-Id}' \
                    AND acctstoptime IS NULL"

                pool {
                    start = 5
                    min = 4
                    max = 10
                    spare = 3
                    uses = 0
                    retry_delay = 30
                    lifetime = 0
                    idle_timeout = 60
                }
            }

            start {
                query = "\
                    INSERT INTO ${..acct_table1} \
                    (acctsessionid, acctuniqueid, username, \
                     realm, nasipaddress, nasportid, nasporttype, \
                     acctstarttime, acctupdatetime, acctstoptime, \
                     acctsessiontime, acctauthentic, \
                     connectinfo_start, connectinfo_stop, \
                     acctinputoctets, acctoutputoctets, \
                     calledstationid, callingstationid, \
                     acctterminatecause, servicetype, \
                     framedprotocol, framedipaddress, \
                     framedipv6address, framedipv6prefix, \
                     framedinterfaceid, delegatedipv6prefix) \
                    VALUES('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', \
                           '%{User-Name}', '%{Realm}', '%{NAS-IP-Address}', \
                           '%{NAS-Port}', '%{NAS-Port-Type}', \
                           '%S', '%S', NULL, \
                           0, '%{Acct-Authentic}', \
                           '%{Connect-Info}', '', \
                           0, 0, \
                           '%{Called-Station-Id}', '%{Calling-Station-Id}', \
                           '', '%{Service-Type}', \
                           '%{Framed-Protocol}', '%{Framed-IP-Address}', \
                           '%{Framed-IPv6-Address}', '%{Framed-IPv6-Prefix}', \
                           '%{Framed-Interface-Id}', '%{Delegated-IPv6-Prefix}')"

                pool {
                    start = 5
                    min = 4
                    max = 10
                    spare = 3
                    uses = 0
                    retry_delay = 30
                    lifetime = 0
                    idle_timeout = 60
                }
            }

            interim-update {
                query = "\
                    UPDATE ${..acct_table1} \
                    SET acctupdatetime = NOW(), \
                        acctsessiontime = '%{Acct-Session-Time}', \
                        acctinputoctets = '%{Acct-Input-Octets}', \
                        acctoutputoctets = '%{Acct-Output-Octets}', \
                        acctterminatecause = '%{Acct-Terminate-Cause}' \
                    WHERE acctuniqueid = '%{Acct-Unique-Session-Id}'"

                pool {
                    start = 5
                    min = 4
                    max = 10
                    spare = 3
                    uses = 0
                    retry_delay = 30
                    lifetime = 0
                    idle_timeout = 60
                }
            }

            stop {
                query = "\
                    UPDATE ${..acct_table2} \
                    SET acctstoptime = NOW(), \
                        acctsessiontime = '%{Acct-Session-Time}', \
                        acctinputoctets = '%{Acct-Input-Octets}', \
                        acctoutputoctets = '%{Acct-Output-Octets}', \
                        acctterminatecause = '%{Acct-Terminate-Cause}', \
                        acctstopdelay = '%{Acct-Delay-Time}' \
                    WHERE acctuniqueid = '%{Acct-Unique-Session-Id}'"

                pool {
                    start = 5
                    min = 4
                    max = 10
                    spare = 3
                    uses = 0
                    retry_delay = 30
                    lifetime = 0
                    idle_timeout = 60
                }
            }
        }
    }

    # Post-Auth logging
    post-auth {
        query = "\
            INSERT INTO ${..postauth_table} \
            (username, pass, reply, authdate) \
            VALUES('%{User-Name}', '%{User-Password}', '%{reply:Packet-Type}', NOW())"

        pool {
            start = 5
            min = 4
            max = 10
            spare = 3
            uses = 0
            retry_delay = 30
            lifetime = 0
            idle_timeout = 60
        }
    }

    # Authentication queries
    authorize {
        read_groups = yes

        query = "\
            SELECT id, username, attribute, value, op \
            FROM ${..authcheck_table} \
            WHERE username = '%{SQL-User-Name}' \
            ORDER BY id"

        pool {
            start = 5
            min = 4
            max = 10
            spare = 3
            uses = 0
            retry_delay = 30
            lifetime = 0
            idle_timeout = 60
        }
    }

    # Group authorization
    group {
        query = "\
            SELECT ${..groupcheck_table}.id, \
                   ${..groupcheck_table}.groupname, \
                   ${..groupcheck_table}.attribute, \
                   ${..groupcheck_table}.value, \
                   ${..groupcheck_table}.op \
            FROM ${..groupcheck_table}, ${..usergroup_table} \
            WHERE ${..usergroup_table}.username = '%{SQL-User-Name}' \
            AND ${..usergroup_table}.groupname = ${..groupcheck_table}.groupname \
            ORDER BY ${..usergroup_table}.priority"

        pool {
            start = 5
            min = 4
            max = 10
            spare = 3
            uses = 0
            retry_delay = 30
            lifetime = 0
            idle_timeout = 60
        }
    }

    # User reply attributes
    reply {
        query = "\
            SELECT id, username, attribute, value, op \
            FROM ${..authreply_table} \
            WHERE username = '%{SQL-User-Name}' \
            ORDER BY id"

        pool {
            start = 5
            min = 4
            max = 10
            spare = 3
            uses = 0
            retry_delay = 30
            lifetime = 0
            idle_timeout = 60
        }
    }

    # Group reply attributes
    reply_group {
        query = "\
            SELECT ${..groupreply_table}.id, \
                   ${..groupreply_table}.groupname, \
                   ${..groupreply_table}.attribute, \
                   ${..groupreply_table}.value, \
                   ${..groupreply_table}.op \
            FROM ${..groupreply_table}, ${..usergroup_table} \
            WHERE ${..usergroup_table}.username = '%{SQL-User-Name}' \
            AND ${..usergroup_table}.groupname = ${..groupreply_table}.groupname \
            ORDER BY ${..usergroup_table}.priority"

        pool {
            start = 5
            min = 4
            max = 10
            spare = 3
            uses = 0
            retry_delay = 30
            lifetime = 0
            idle_timeout = 60
        }
    }
}
